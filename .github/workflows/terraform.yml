name: Terraform CI

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write
  pull-requests: write
  issues: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: install jq
        run: sudo apt-get install jq
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
        
      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate
      
      - name: Setup tf-summarize
        uses: kishaningithub/setup-tf-summarize@v2

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        id: plan
        shell: bash
        run: |
          set -x

          terraform plan -out=tfplan -no-color -input=false
          terraform show -json tfplan | tf-summarize -json > tfplan_summary.json
          jq empty tfplan_summary.json || exit 1

          SUMMARY=$(jq '
            # Function to parse JSON strings
            def parse_json_string:
              if type == "string" and (try fromjson catch null != null)
              then fromjson
              else .
              end;
            # Recursively process all fields
            walk(
              if type == "object"
              then with_entries(.value |= parse_json_string)
              else .
              end
            )' tfplan_summary.json)

          echo "Formatted Summary:"
          echo "$SUMMARY"
          
          echo "SUMMARY<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload Plan Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const body = `\`\`\`json\n${{ steps.plan.outputs.SUMMARY }}\n\`\`\``;

            try {
              // Debug: Log comment body
              console.log("Comment body to post:", body);

              // Get existing comments
              const { data: comments } = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number,
              });

              // Debug: Log all comments (author and partial body)
              console.log(`Found ${comments.length} comments:`);
              comments.forEach((comment, index) => {
                console.log(`Comment ${index + 1}: Author=${comment.user.login}, Body starts with=${comment.body.substring(0, 50)}...`);
              });

              // Find existing comment by GitHub Actions bot
              const botComment = comments.find(comment => 
                comment.user.login === 'github-actions[bot]'
              );

              // Debug: Log whether bot comment was found
              console.log("Bot comment found:", !!botComment);
              if (botComment) {
                console.log(`Existing comment ID: ${botComment.id}, Body starts with: ${botComment.body.substring(0, 50)}...`);
              }

              if (botComment) {
                // Update existing comment
                console.log(`Updating comment ID ${botComment.id}`);
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: botComment.id,
                  body,
                });
                console.log("Comment updated successfully");
              } else {
                // Create new comment
                console.log("Creating new comment");
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body,
                });
                console.log("Comment created successfully");
              }
            } catch (error) {
              // Log any errors from GitHub API
              console.error("Error in comment operation:", error.message);
              if (error.response) {
                console.error("Response status:", error.response.status);
                console.error("Response data:", error.response.data);
              }
              throw error; // Fail the step to surface the error
            }
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Wait and Destroy
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          sleep 300
          terraform destroy -auto-approve

      - name: Cleanup Terraform lock in S3 on cancellation
        if: always() && (cancelled() || failure())
        run: |
          aws s3 rm s3://viet-terraform/vpc-lab/terraform.tfstate.tflock
          
