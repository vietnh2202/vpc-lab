name: Terraform CI

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write
  pull-requests: write
  issues: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
        
      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate
      
      - name: Setup tf-summarize
        uses: kishaningithub/setup-tf-summarize@v2

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        id: plan
        run: |
          terraform plan -out=tfplan -no-color -input=false
          terraform show -json tfplan | tf-summarize -json > tfplan.json
          echo "plan_output=$(cat tfplan.json)" >> $GITHUB_ENV

      - name: Upload Plan Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('tfplan.json', 'utf8'));
            const output = `#### Terraform Plan Summary (via tf-summarize)\n\`\`\`json\n${JSON.stringify(summary, null, 2)}\n\`\`\``;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => comment.body.includes('Terraform Plan Summary'));
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output,
            });

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

      - name: Wait and Destroy
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          sleep 300
          terraform destroy -auto-approve

      - name: Cleanup Terraform lock in S3 on cancellation
        if: cancelled()
        run: |
          aws s3 rm s3://viet-terraform/vpc-lab/terraform.tfstate.tflock
          
